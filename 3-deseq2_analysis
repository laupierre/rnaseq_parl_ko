# /Volumes/texas/spinazzi_bgi/parl_bgi_v3

## summarize length (min and max lengths) of transcripts by Gene

gtf <- rtracklayer::import("gencode.vM32.primary_assembly.annotation.gtf")
gtf_df <- as.data.frame(gtf)
gtf_df <- gtf_df[gtf_df$type == "transcript", ]
gtf_df <- unique (gtf_df[ ,c("gene_id", "transcript_id")])

# the length was pre-calculated using the 2-transcripts_length code
mylength <- read.delim ("transcript_length.csv", sep="")
gtf_df <- merge (gtf_df, mylength, by="transcript_id")


library (dplyr)

mylength <- gtf_df %>% group_by (gene_id) %>% summarize (minLength = min(Length), maxLength = max(Length))
dim (mylength)
# 57010     3



## Gene annotation
# See https://github.com/laupierre/RNA-Seq_mouse_pipeline/blob/main/gene_annotation.R

annot <- read.delim ("gencode.vM32.annotation.txt")
length (unique (annot$gene_id))
# 56953

annot <- annot[ ,grep ("transcript_id", colnames (annot), invert=TRUE)]
annot <- annot[!duplicated (annot), ]
length (unique (annot$gene_id))
# 56953

# ~60 genes are placed on scaffold 
# annot <- merge (annot, mylength, by.x="gene_id", by.y="gene_id", all.x=TRUE, all.y=TRUE)
# write.table (annot, "parl_temp_annot.txt", sep="\t", quote=F, row.names=F)

annot <- merge (annot, mylength, by.x="gene_id")
annot <- annot[ ,c(1:5,7,8,6)]
dim (annot)
# 56953  8



## star/featurecounts results

counts <- read.delim ("parl_subread.counts.txt", row.names=1, skip=1)

counts <- counts[ ,grep ("bam", colnames (counts))]
colnames (counts) <- gsub ("Aligned.out.bam", "", colnames (counts))
colnames (counts) <- gsub ("star.", "", colnames (counts))
dim (counts)
# 57010

subread <- merge (counts, annot, by.x="row.names", by.y="gene_id")
write.table (subread, "parl_star_raw_data_annot_v3.txt", sep="\t", quote=F, row.names=F)



##############################
###### Differential expression

library (ggplot2)
library (ggrepel)
library (DESeq2)

counts <- read.delim ("parl_star_raw_data_annot_v3.txt", row.names=1)
# remove ribosomal RNAs and miRNAs
counts <- counts[grep ("miRNA|rRNA", counts$gene_type, invert=TRUE), ]

annot <- counts[ ,grep ("Parl", colnames (counts), invert=TRUE)]
counts <- counts[ ,grep ("Parl", colnames (counts))]


## brain tissue
counts <- counts[ ,grep ("_C", colnames (counts))]

coldata <- data.frame (matrix (nrow=dim (counts)[2], ncol=0))
coldata$sample <- row.names (coldata) <- colnames (counts)
coldata$sample <- gsub ("Parl_", "", coldata$sample)
coldata$condition <- factor (gsub ("_.*", "", coldata$sample))
coldata

stopifnot (colnames (counts) == row.names (coldata))

dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = coldata,
                              design = ~ condition)

# keep <- rowSums(counts(dds)) >= 30*(dim(counts)[2]/2)
keep <- apply (counts (dds), 1, function (x) sum (x >30) > dim(counts)[2]/2 )
dds <- dds[keep,]
dds


dds$condition <- relevel(dds$condition, ref = "WT")

dds <- DESeq(dds)
resultsNames(dds)

res <- results(dds, name= "condition_KO_vs_WT")

res <- merge (data.frame (res), round (counts(dds, norm=TRUE)), by="row.names")
res <- merge (res, annot, by.x="Row.names", by.y="row.names") 

res <- res[order (res$padj), ]
colnames (res)[1] <- "gene_id"

table (res$padj < 0.05)

write.table (res, "parl_star_rnaseq_brain_v3.txt", sep="\t", quote=F, row.names= F)



## PCA plot

data.frame (sum= apply (counts (dds), 2, sum))

vsd <- vst(dds, blind=FALSE)
# vsd <- vst (round (counts (dds, norm=TRUE)), blind=FALSE)

# plotPCA(vsd, intgroup=c("condition"))

pcaData <- plotPCA(vsd, intgroup=c("condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(PC1, PC2, color=condition, label=name)) +
  geom_point(size=3) + geom_text_repel () +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  coord_fixed()
ggsave ("PCA plot of brain samples v3.pdf")


# variance of genes

ntd <- normTransform(dds)

library("vsn")
meanSdPlot(assay(ntd))




#### muscle tissue
rm (list = ls ())

counts <- read.delim ("parl_star_raw_data_annot_v3.txt", row.names=1)
# remove ribosomal RNAs and miRNAs
counts <- counts[grep ("miRNA|rRNA", counts$gene_type, invert=TRUE), ]

annot <- counts[ ,grep ("Parl", colnames (counts), invert=TRUE)]
counts <- counts[ ,grep ("Parl", colnames (counts))]


counts <- counts[ ,grep ("_M", colnames (counts))]

coldata <- data.frame (matrix (nrow=dim (counts)[2], ncol=0))
coldata$sample <- row.names (coldata) <- colnames (counts)
coldata$sample <- gsub ("Parl_", "", coldata$sample)
coldata$condition <- factor (gsub ("_.*", "", coldata$sample))
coldata

stopifnot (colnames (counts) == row.names (coldata))


dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = coldata,
                              design = ~ condition)

#keep <- rowSums(counts(dds)) >= 30
# keep <- rowSums(counts(dds)) >= 30*(dim(counts)[2]/2)
keep <- apply (counts (dds), 1, function (x) sum (x >30) > dim(counts)[2]/2 )

dds <- dds[keep,]
dds


dds$condition <- relevel(dds$condition, ref = "WT")

dds <- DESeq(dds)
resultsNames(dds)

res <- results(dds, name= "condition_KO_vs_WT")

res <- merge (data.frame (res), round (counts(dds, norm=TRUE)), by="row.names")
res <- merge (res, annot, by.x="Row.names", by.y="row.names") 

res <- res[order (res$padj), ]
colnames (res)[1] <- "gene_id"

table (res$padj < 0.05)

write.table (res, "parl_star_rnaseq_muscle_v3.txt", sep="\t", quote=F, row.names= F)


## PCA plot

data.frame (sum= apply (counts (dds), 2, sum))

vsd <- vst(dds, blind=FALSE)
# vsd <- vst (round (counts (dds, norm=TRUE)), blind=FALSE)

# plotPCA(vsd, intgroup=c("condition"))

pcaData <- plotPCA(vsd, intgroup=c("condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(PC1, PC2, color=condition, label=name)) +
  geom_point(size=3) + geom_text_repel () +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  coord_fixed()
ggsave ("PCA plot of muscle samples v3.pdf")


# variance of genes

ntd <- normTransform(dds)

library("vsn")
meanSdPlot(assay(ntd))




